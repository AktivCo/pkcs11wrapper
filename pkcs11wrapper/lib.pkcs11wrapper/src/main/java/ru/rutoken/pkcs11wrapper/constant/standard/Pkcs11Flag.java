package ru.rutoken.pkcs11wrapper.constant.standard;

import ru.rutoken.pkcs11jna.Pkcs11Constants;
import ru.rutoken.pkcs11wrapper.constant.LongValueSupplier;

public enum Pkcs11Flag implements LongValueSupplier {
    CKF_TOKEN_PRESENT(Pkcs11Constants.CKF_TOKEN_PRESENT),
    CKF_REMOVABLE_DEVICE(Pkcs11Constants.CKF_REMOVABLE_DEVICE),
    CKF_HW_SLOT(Pkcs11Constants.CKF_HW_SLOT),

    CKF_RNG(Pkcs11Constants.CKF_RNG),
    CKF_WRITE_PROTECTED(Pkcs11Constants.CKF_WRITE_PROTECTED),
    CKF_LOGIN_REQUIRED(Pkcs11Constants.CKF_LOGIN_REQUIRED),
    CKF_USER_PIN_INITIALIZED(Pkcs11Constants.CKF_USER_PIN_INITIALIZED),

    CKF_RESTORE_KEY_NOT_NEEDED(Pkcs11Constants.CKF_RESTORE_KEY_NOT_NEEDED),
    CKF_CLOCK_ON_TOKEN(Pkcs11Constants.CKF_CLOCK_ON_TOKEN),
    CKF_PROTECTED_AUTHENTICATION_PATH(Pkcs11Constants.CKF_PROTECTED_AUTHENTICATION_PATH),
    CKF_DUAL_CRYPTO_OPERATIONS(Pkcs11Constants.CKF_DUAL_CRYPTO_OPERATIONS),
    CKF_TOKEN_INITIALIZED(Pkcs11Constants.CKF_TOKEN_INITIALIZED),
    CKF_SECONDARY_AUTHENTICATION(Pkcs11Constants.CKF_SECONDARY_AUTHENTICATION),
    CKF_USER_PIN_COUNT_LOW(Pkcs11Constants.CKF_USER_PIN_COUNT_LOW),
    CKF_USER_PIN_FINAL_TRY(Pkcs11Constants.CKF_USER_PIN_FINAL_TRY),
    CKF_USER_PIN_LOCKED(Pkcs11Constants.CKF_USER_PIN_LOCKED),
    CKF_USER_PIN_TO_BE_CHANGED(Pkcs11Constants.CKF_USER_PIN_TO_BE_CHANGED),
    CKF_SO_PIN_COUNT_LOW(Pkcs11Constants.CKF_SO_PIN_COUNT_LOW),
    CKF_SO_PIN_FINAL_TRY(Pkcs11Constants.CKF_SO_PIN_FINAL_TRY),
    CKF_SO_PIN_LOCKED(Pkcs11Constants.CKF_SO_PIN_LOCKED),
    CKF_SO_PIN_TO_BE_CHANGED(Pkcs11Constants.CKF_SO_PIN_TO_BE_CHANGED),
    CKF_ERROR_STATE(Pkcs11Constants.CKF_ERROR_STATE),

    CKF_RW_SESSION(Pkcs11Constants.CKF_RW_SESSION),
    CKF_SERIAL_SESSION(Pkcs11Constants.CKF_SERIAL_SESSION),

    CKF_ARRAY_ATTRIBUTE(Pkcs11Constants.CKF_ARRAY_ATTRIBUTE),

    CKF_HW(Pkcs11Constants.CKF_HW),

    CKF_ENCRYPT(Pkcs11Constants.CKF_ENCRYPT),
    CKF_DECRYPT(Pkcs11Constants.CKF_DECRYPT),
    CKF_DIGEST(Pkcs11Constants.CKF_DIGEST),
    CKF_SIGN(Pkcs11Constants.CKF_SIGN),
    CKF_SIGN_RECOVER(Pkcs11Constants.CKF_SIGN_RECOVER),
    CKF_VERIFY(Pkcs11Constants.CKF_VERIFY),
    CKF_VERIFY_RECOVER(Pkcs11Constants.CKF_VERIFY_RECOVER),
    CKF_GENERATE(Pkcs11Constants.CKF_GENERATE),
    CKF_GENERATE_KEY_PAIR(Pkcs11Constants.CKF_GENERATE_KEY_PAIR),
    CKF_WRAP(Pkcs11Constants.CKF_WRAP),
    CKF_UNWRAP(Pkcs11Constants.CKF_UNWRAP),
    CKF_DERIVE(Pkcs11Constants.CKF_DERIVE),

    CKF_EC_F_P(Pkcs11Constants.CKF_EC_F_P),
    CKF_EC_F_2M(Pkcs11Constants.CKF_EC_F_2M),
    CKF_EC_ECPARAMETERS(Pkcs11Constants.CKF_EC_ECPARAMETERS),
    CKF_EC_NAMEDCURVE(Pkcs11Constants.CKF_EC_NAMEDCURVE),
    CKF_EC_UNCOMPRESS(Pkcs11Constants.CKF_EC_UNCOMPRESS),
    CKF_EC_COMPRESS(Pkcs11Constants.CKF_EC_COMPRESS),

    CKF_EXTENSION(Pkcs11Constants.CKF_EXTENSION),

    CKF_LIBRARY_CANT_CREATE_OS_THREADS(Pkcs11Constants.CKF_LIBRARY_CANT_CREATE_OS_THREADS),
    CKF_OS_LOCKING_OK(Pkcs11Constants.CKF_OS_LOCKING_OK),

    CKF_DONT_BLOCK(Pkcs11Constants.CKF_DONT_BLOCK),

    CKF_NEXT_OTP(Pkcs11Constants.CKF_NEXT_OTP),
    CKF_EXCLUDE_TIME(Pkcs11Constants.CKF_EXCLUDE_TIME),
    CKF_EXCLUDE_COUNTER(Pkcs11Constants.CKF_EXCLUDE_COUNTER),
    CKF_EXCLUDE_CHALLENGE(Pkcs11Constants.CKF_EXCLUDE_CHALLENGE),
    CKF_EXCLUDE_PIN(Pkcs11Constants.CKF_EXCLUDE_PIN),
    CKF_USER_FRIENDLY_OTP(Pkcs11Constants.CKF_USER_FRIENDLY_OTP);

    private final long mValue;

    Pkcs11Flag(long value) {
        mValue = value;
    }

    @Override
    public long getAsLong() {
        return mValue;
    }
}
